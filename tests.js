const tests = [
  `const a = 1;
const b ='b';
if (a === 1) {
  const a = 2;
  a + b;
} else {
  const a = 3;
  b + a;
}`,
  `const f = 1;
function f(a, b, c) {
  return a + b + c + f;
}`,
  `const f = 1;
function g(x) {
  return (x => x)(x);
}`,
  `const x = 1;
function g(y) {
  return f(x)(x);
}`,
  `const x = 1;
function g(y) {
  return f(x=>x)(y=>x)(x=>y(y)(y)(x)(x=>x+1+f()));
}`,
  'function f() { return 1; }\nlist(1, \'a string ""\', () => f, f, true, 3.14);',
  'im_undefined;',
  '"enable verbose";\nim_undefined;',
  'im_undefined;',
  '"enable verbose";\nim_undefined;',
  'map = 5;',
  '\n    function unreachable() {\n      return 1 < true; // Will cause an error\n    }\n    function f() {\n      unreachable();\n      return 0;\n    }\n    f();\n  ',
  '\n    function unreachable() {\n      return 1 < true; // Will cause an error\n    }\n    function f() {\n      return 1;\n      unreachable();\n      return 0;\n      unreachable();\n    }\n    f();\n  ',
  'pair(1, \'a string ""\');',
  '',
  "'42';",
  '25*(display(1+1));',
  '42;',
  'true;',
  '\n    function unreachable() {\n      return 1 < true; // Will cause an error\n    }\n    function id(x) {\n      return x;\n    }\n    function f() {\n      return id(1) + id(2);\n      unreachable();\n      return 0;\n      unreachable();\n    }\n    f();\n  ',
  'function f(x) {\n  if (x <= 0) {\n    return 0;\n  } else {\n    return 1 + f(x-1);\n  }\n}\nf(10000);',
  'stream();',
  '\n    function unreachable() {\n      return 1 < true; // Will cause an error\n    }\n    function id(x) {\n      return x;\n    }\n    function f() {\n      return id(1);\n      unreachable();\n      return 0;\n      unreachable();\n    }\n    f();\n  ',
  '\n    function unreachable() {\n      return 1 < true; // Will cause an error\n    }\n    function f() {\n      if (true) {\n        return 1;\n        unreachable();\n      } else {}\n      unreachable();\n      return 0;\n      unreachable();\n    }\n    f();\n  ',
  '() => 42;',
  '\n    function unreachable() {\n      return 1 < true; // Will cause an error\n    }\n    function id(x) {\n      return x;\n    }\n    function f() {\n      if (true) {\n        return id(1) + id(2);\n        unreachable();\n      } else {}\n      unreachable();\n      return 0;\n      unreachable();\n    }\n    f();\n  ',
  '\n    function unreachable() {\n      return 1 < true; // Will cause an error\n    }\n    function id(x) {\n      return x;\n    }\n    function f() {\n      if (true) {\n        return id(1);\n        unreachable();\n      } else {}\n      unreachable();\n      return 0;\n      unreachable();\n    }\n    f();\n  ',
  'stringify(pair);',
  'head(pair(1, \'a string ""\'));',
  '"enable verbose";\nmap = 5;',
  'head(stream_tail(stream(1, 2)));',
  '\n    function unreachable() {\n      return 1 < true; // Will cause an error\n    }\n    function f() {\n      while (true) {\n        return 1;\n        unreachable();\n      }\n      unreachable();\n      return 0;\n      unreachable();\n    }\n    f();\n  ',
  'map = 5;',
  '"enable verbose";\nmap = 5;',
  'undefined = 5;',
  'tail(pair(1, \'a string ""\'));',
  '"enable verbose";\nundefined = 5;',
  'toString(pair);',
  'stream_tail(integers_from(0));',
  'undefined = 5;',
  '"enable verbose";\nundefined = 5;',
  'parse_int("10");',
  'tail(list(1));',
  'parse("\'");',
  '\n    function unreachable() {\n      return 1 < true; // Will cause an error\n    }\n    function id(x) {\n      return x;\n    }\n    function f() {\n      while (true) {\n        return id(1) + id(2);\n        unreachable();\n      }\n      unreachable();\n      return 0;\n      unreachable();\n    }\n    f();\n  ',
  'function f(x) {\n  return a;\n}\nmap(f, list(1, 2));',
  'toString({a: 1});',
  'function i(n) {\n  return n === 0 ? 0 : 1 + i(n-1);\n}\ni(1000);',
  'list();',
  'stream_length(integers_from(0));',
  '\n    function unreachable() {\n      return 1 < true; // Will cause an error\n    }\n    function id(x) {\n      return x;\n    }\n    function f() {\n      while (true) {\n        return id(1);\n        unreachable();\n      }\n      unreachable();\n      return 0;\n      unreachable();\n    }\n    f();\n  ',
  'let sum = 0;\nfor_each(x => {\n  sum = sum + x;\n}, list(1, 2, 3));\nsum;',
  'toString([1, 2]);',
  'equal(map(x => 2 * x, list(12, 11, 3)), list(24, 22, 6));',
  '\n    function unreachable() {\n      return 1 < true; // Will cause an error\n    }\n    function f() {\n      for (let i = 0; i < 100; i = i + 1) {\n        return i+1;\n        unreachable();\n      }\n      unreachable();\n      return 0;\n      unreachable();\n    }\n    f();\n  ',
  'function f(x) {\n  return 5;\n}\ntoString(a=>a) + toString(f);',
  'equal(filter(x => x <= 4, list(2, 10, 1000, 1, 3, 100, 4, 5, 2, 1000)), list(2, 1, 3, 4, 2));',
  'toString(true) +\ntoString(false) +\ntoString(1) +\ntoString(1.5) +\ntoString(null) +\ntoString(undefined) +\ntoString(NaN);',
  '\n    function unreachable() {\n      return 1 < true; // Will cause an error\n    }\n    function id(x) {\n      return x;\n    }\n    function f() {\n      for (let i = 0; i < 100; i = i + 1) {\n        return id(i+1) + id(i+2);\n      }\n      return 0;\n    }\n    f();\n  ',
  'const fac = (i) => i === 1 ? 1 : i * fac(i-1);\nfac(5);',
  'equal(build_list(5, x => x * x), list(0, 1, 4, 9, 16));',
  '\n    function unreachable() {\n      return 1 < true; // Will cause an error\n    }\n    function id(x) {\n      return x;\n    }\n    function f() {\n      for (let i = 0; i < 100; i = i + 1) {\n        return id(i+1);\n        unreachable();\n      }\n      unreachable();\n      return 0;\n      unreachable();\n    }\n    f();\n  ',
  '42',
  '(x => x(x)(x))(x => x(x)(x));',
  'equal(reverse(list("string", null, undefined, null, 123)), list(123, null, undefined, null, "string"));',
  'equal(append(list("string", 123), list(456, null, undefined)), list("string", 123, 456, null, undefined));',
  'equal(\n  member("string", list(1, 2, 3, "string", 123, 456, null, undefined)),\n  list("string", 123, 456, null, undefined));',
  'remove(1, list(1));',
  'remove(2, list(1));',
  'equal(remove_all(1, list(1, 2, 3, 4, 1, 1, "1", 5, 1, 1, 6)), list(2, 3, 4, "1", 5, 6));',
  'equal(remove_all(1, list(2, 3, "1")), list(2, 3, "1"));',
  'equal(enum_list(1, 5), list(1, 2, 3, 4, 5));',
  '',
  'parse("");',
  'equal(enum_list(1.5, 5), list(1.5, 2.5, 3.5, 4.5));',
  'list_ref(list(1, 2, 3, "4", 4), 4);',
  'accumulate((curr, acc) => curr + acc, 0, list(2, 3, 4, 1));',
  'function name(a, b) {\n  const sum = a + b;\n  if (sum > 1) {\n    return sum;\n  } else {\n    if (a % 2 === 0) {\n      return -1;\n    } else if (b % 2 === 0) {\n      return 1;\n    } else {\n      return a > b ? 0 : -2;\n    }\n  }\n}\nname(1, 2);',
  'parse("function name(a, b) {\\n  const sum = a + b;\\n  if (sum > 1) {\\n    return sum;\\n  } else {\\n    if (a % 2 === 0) {\\n      return -1;\\n    } else if (b % 2 === 0) {\\n      return 1;\\n    } else {\\n      return a > b ? 0 : -2;\\n    }\\n  }\\n}\\nname(1, 2);");',
  'list_to_string(list(1, 2, 3));',
  'let p = pair(1, 2);\nconst q = p;\nset_head(p, 3);\np === q && equal(p, pair(3, 2));',
  'let p = pair(1, 2);\nconst q = p;\nset_tail(p, 3);\np === q && equal(p, pair(1, 3));',
  '(() => true)();',
  'parse("(() => true)();");',
  'head([1, 2, 3]);',
  'tail([1, 2, 3]);',
  '((x, y) => { return x + y; })(1, 2);',
  'parse("((x, y) => { return x + y; })(1, 2);");',
  'length([1, 2, 3]);',
  'true;',
  'parse("true;");',
  'map(x=>x, [1, 2, 3]);',
  'for_each(x=>x, [1, 2, 3]);',
  'false;',
  'parse("false;");',
  'reverse([1, 2, 3]);',
  "'a string \"\" \\'\\'';",
  'parse("\'a string \\"\\" \\\\\'\\\\\'\';");',
  'append([1, 2, 3], list(1, 2, 3));',
  '31.4 + (-3.14e10) * -1 % 2 / 1.5;',
  'parse("31.4 + (-3.14e10) * -1 % 2 / 1.5;");',
  'member(1, [1, 2, 3]);',
  'remove(1, [1, 2, 3]);',
  'remove_all(1, [1, 2, 3]);',
  '!false === (1 !== 2) && 1 < 2 && 1 <= 2 && 2 >= 1 && 2 > 1 || false;',
  'parse("!false === (1 !== 2) && 1 < 2 && 1 <= 2 && 2 >= 1 && 2 > 1 || false;");',
  'parse("true ? 1 : 2;");',
  'true ? 1 : 2;',
  'assoc(1, [1, 2, 3]);',
  'filter(x => true, [1, 2, 3]);',
  'null;',
  'parse("null;");',
  'null;',
  'accumulate((x, y) => x + y, [1, 2, 3]);',
  'accumulate((x, y) => x + y, [1, 2, 3]);',
  'pair(1, null);',
  'pair(1, null);',
  'parse("pair(1, null);");',
  'set_head([1, 2, 3], 4);',
  'set_tail([1, 2, 3], 4);',
  'list(1);',
  'parse("list(1);");',
  'list(1);',
  "build_list('1', x => x);",
  "enum_list('1', '5');",
  'let i = 1;\nwhile (i < 5) {\n  i = i + 1;\n}\ni;',
  'parse("let i = 1;\\nwhile (i < 5) {\\n  i = i + 1;\\n}\\ni;");',
  'let i = 1;\nwhile (i < 5) {\n  i = i + 1;\n}\ni;',
  "enum_list('1', 5);",
  "enum_list(1, '5');",
  'list_ref(list(1, 2, 3), 3);',
  'let i = 1;\nfor (i = 1; i < 5; i = i + 1) {\n}\ni;',
  'parse("let i = 1;\\nfor (i = 1; i < 5; i = i + 1) {\\n}\\ni;");',
  'let i = 1;\nfor (i = 1; i < 5; i = i + 1) {\n}\ni;',
  'list_ref(list(1, 2, 3), -1);',
  'list_ref(list(1, 2, 3), 1.5);',
  'let i = 1;\nfor (let j = 0; j < 5; j = j + 1) {\n  if (j < 1) {\n    continue;\n  } else {\n    i = i + 1;\n    if (j > 2) {\n      break;\n    } else {\n    }\n  }\n}\ni;',
  'parse("let i = 1;\\nfor (let j = 0; j < 5; j = j + 1) {\\n  if (j < 1) {\\n    continue;\\n  } else {\\n    i = i + 1;\\n    if (j > 2) {\\n      break;\\n    } else {\\n    }\\n  }\\n}\\ni;");',
  'let i = 1;\nfor (let j = 0; j < 5; j = j + 1) {\n  if (j < 1) {\n    continue;\n  } else {\n    i = i + 1;\n    if (j > 2) {\n      break;\n    } else {\n    }\n  }\n}\ni;',
  "list_ref(list(1, 2, 3), '1');",
  '[];',
  'parse("[];");',
  '[];',
  '[1, 2, 3];',
  'parse("[1, 2, 3];");',
  '[1, 2, 3];',
  "display('message');",
  "error('error!');",
  '[1, 2, 3][1];',
  'parse("[1, 2, 3][1];");',
  '[1, 2, 3][1];',
  'is_undefined(undefined);',
  'is_undefined(null);',
  'is_null(undefined);',
  'let x = [1, 2, 3];\nx[1];',
  'parse("let x = [1, 2, 3];\\nx[1];");',
  'let x = [1, 2, 3];\nx[1];',
  'is_null(null);',
  "is_string('string');",
  "is_string('true');",
  "is_string('1');",
  'let x = [1, 2, 3];\nx[1] = 4;',
  'parse("let x = [1, 2, 3];\\nx[1] = 4;");',
  'let x = [1, 2, 3];\nx[1] = 4;',
  'is_string(true);',
  "is_number('string');",
  'is_string(1);',
  "is_number('true');",
  "is_number('1');",
  'is_number(true);',
  'is_number(1);',
  "is_boolean('string');",
  "is_boolean('true');",
  '({});',
  'parse("({});");',
  '({});',
  '({a: 1, b: 2});',
  'parse("({a: 1, b: 2});");',
  '({a: 1, b: 2});',
  "is_boolean('1');",
  'is_boolean(true);',
  'is_boolean(1);',
  'is_function(display);',
  'is_function(x => x);',
  "({a: 1, b: 2})['a'];",
  'parse("({a: 1, b: 2})[\'a\'];");',
  "({a: 1, b: 2})['a'];",
  'function f(x) {\n  return x;\n}\nis_function(f);',
  'is_function(1);',
  'is_array(1);',
  '({a: 1, b: 2}).a;',
  'parse("({a: 1, b: 2}).a;");',
  '({a: 1, b: 2}).a;',
  'is_array(pair(1, 2));',
  "({'a': 1, 'b': 2}).a;",
  "parse(\"({'a': 1, 'b': 2}).a;\");",
  "({'a': 1, 'b': 2}).a;",
  'is_array([1]);',
  'is_object(1);',
  "({1: 1, 2: 2})['1'];",
  'parse("({1: 1, 2: 2})[\'1\'];");',
  "({1: 1, 2: 2})['1'];",
  "const key = 'a';\n({a: 1, b: 2})[key];",
  'parse("const key = \'a\';\\n({a: 1, b: 2})[key];");',
  "const key = 'a';\n({a: 1, b: 2})[key];",
  'is_object(pair(1, 2));',
  'is_object([1]);',
  'is_object({});',
  'let x = {a: 1, b: 2};\nx.a = 3;',
  'parse("let x = {a: 1, b: 2};\\nx.a = 3;");',
  'let x = {a: 1, b: 2};\nx.a = 3;',
  'is_object({a: 1});',
  'is_object(x => x);',
  'is_object(display);',
  'is_object(1);',
  "is_object('string');",
  "let x = {a: 1, b: 2};\nx['a'] = 3;",
  'parse("let x = {a: 1, b: 2};\\nx[\'a\'] = 3;");',
  "let x = {a: 1, b: 2};\nx['a'] = 3;",
  'is_object(true);',
  'is_NaN(1 / 0);',
  'is_NaN(NaN);',
  'is_NaN(1);',
  'is_NaN(x => x);',
  "has_own_property({a: 1, b: 2}, 'a');",
  "has_own_property({a: 1, b: 2}, 'c');",
  'array_length([1]);',
  "let x = {a: 1, b: 2};\nconst key = 'a';\nx[key] = 3;",
  'parse("let x = {a: 1, b: 2};\\nconst key = \'a\';\\nx[key] = 3;");',
  "let x = {a: 1, b: 2};\nconst key = 'a';\nx[key] = 3;",
  "parse_int('10', 10);",
  "parse_int('10', 2);",
  'is_number(runtime());',
  'const start = runtime();\nfunction repeatUntilDifferentTime() {\n  if (start === runtime()) {\n    return repeatUntilDifferentTime();\n  } else {\n    return true;\n  }\n}\nrepeatUntilDifferentTime();',
  'pair(1, 2);',
  'list(1, 2);',
  'is_list(1);',
  'is_list(pair(1, 2));',
  'is_list(list(1, 2));',
  'stringify(0);',
  "stringify('a string');",
  "stringify('true');",
  'function f(x, y) {\n  return x;\n}\nstringify(f);',
  'const f = (x, y) => x;\nstringify(f);',
  'head(pair(1, 2));',
  "const xs = [1, 'true', true, () => 1];\nstringify(xs);",
  'tail(pair(1, 2));',
  'head(null);',
  'tail(null);',
  'head(1);',
  "const xs = [1, 'true', [true, () => 1, [[]]]];\nstringify(xs);",
  'tail(1);',
  'length(list(1, 2));',
  'length(1);',
  'const xs = [];\nstringify(xs);',
  'stringify(enum_list(1, 10));',
  'stringify(enum_list(1, 100));',
  'stringify(parse(""), undefined, 2);',
  'const arr = [];\nfor (let i = 0; i < 100; i = i + 1) {\n  arr[i] = i;\n}\nstringify(arr);',
  'stringify(parse("3; true; false; \'\'; \\"\\"; \'bob\'; 1; 20;"), undefined, 2);',
  'stringify(parse("x;"), undefined, 2);',
  'const o = { a: 1, b: true, c: () => 1 };\nstringify(o);',
  'const o = { a: 1, b: true, c: () => 1, d: { e: 5, f: 6 } };\nstringify(o);',
  'stringify(parse("x; moreNames; undefined;"), undefined, 2);',
  'const o = { a: 1, b: true, c: () => 1, d: { e: 5, f: 6 }, g: 0, h: 0, i: 0, j: 0, k: 0, l: 0, m: 0, n: 0};\nstringify(o);',
  'stringify(parse("3 + 5 === 8 || !true && false;"), undefined, 2);',
  'stringify(parse("const x = 5; let y = x;"), undefined, 2);',
  'let o = {};\no.o = o;\nstringify(o);',
  'stringify(pair);',
  'stringify(parse("x = 5; x = x; if (true) { x = 5; } else {}"), undefined, 2);',
  'stringify(null);',
  'stringify(parse("if (true) { hi; } else { haha; } if (false) {} else {}"), undefined, 2);',
  'stringify(undefined);',
  "stringify(parse('x=>x;'), 0);",
  'stringify(parse("(x, y) => x + 1;"), undefined, 2);',
  "stringify(parse('x=>x;'), 1);",
  'stringify(parse("(x, y) => x + 1;"), undefined, 2);',
  'function f(x) {return x(x)(x);} f(f);',
  "stringify(parse('x=>x;'));",
  'stringify(parse("const y = (x, y) => x + 1;"), undefined, 2);',
  "stringify(parse('x=>x;'), 100);",
  'stringify(parse("x => x + 1;"), undefined, 2);',
  "stringify(parse('x=>x;'), ' ... ');",
  'stringify(parse("const y = x => x + 1;"), undefined, 2);',
  "stringify(parse('x=>x;'), '.................................');",
  'stringify(parse("f(x); thrice(thrice)(plus_one)(0);"), undefined, 2);',
  'stringify(parse("function fib(x) { return x <= 1 ? x : fib(x-1) + fib(x-2); } fib(4);"), undefined, 2);',
  'stringify(parse("let x = {a: 5, b: 10, \'key\': value};"), undefined, 2);',
  'stringify(parse("a[b]; a.b; a[5]; a[\'b\'];"), undefined, 2);',
  "stringify(parse(\"a[b] = 5; a.b = value; a[5] = 'value'; a['b'] = 42;\"), undefined, 2);",
  'stringify(parse( "while (true) { continue; break; } for (let i = 0; i < 1; i = i + 1) { continue; break; } for (i = 0; i < 1; i = i + 1) { continue; break; }"), undefined, 2);',
  'function f(x, y) {\n  if (x <= 0) {\n    return y;\n  } else {\n    return f(x-1, y+1);\n  }\n}\nf(5000, 5000);',
  'for(; i < 3; i = i + 1) {\n  break;\n}',
  '"enable verbose";\n for(; i < 3; i = i + 1) {\nbreak;\n }',
  'for(let i = 0; ; i = i + 1) {\n  break;\n}',
  '"enable verbose";\n for(let i = 0; ; i = i + 1) {\nbreak;\n }',
  'for(let i = 0; i < 3;) {\n  break;\n}',
  '"enable verbose";\n   for(let i = 0; i < 3;) {\n     break;\n   }',
  'for(;;) {\n  break;\n}',
  '"enable verbose";\n for(;;) {\nbreak;\n }',
  'while() {\n  x;\n}',
  '"enable verbose";\n while() {\n   x;\n }',
  'let x = 3;\nx++;\nx;',
  '"enable verbose";\nlet x = 3;\nx++;\nx;',
  '5',
  '"enable verbose";\n5',
  'if (true) { 5; }',
  '"enable verbose";\n if (true) { 5; }',
  'let x = 3;\nlet y = x = 5;\nx;',
  '"enable verbose";\nlet x = 3;\nlet y = x = 5;\nx;',
  'let x = 3;\nlet y = 4;\nx = y = 5;\nx;',
  '"enable verbose";\nlet x = 3;\nlet y = 4;\nx = y = 5;\nx;',
  'let x = 3;\nlet y = 4;\nlet z = 5;\nx = y = z = 6;\nx;',
  '"enable verbose";\n let x = 3;\n let y = 4;\n let z = 5;\n x = y = z = 6;\n x;',
  'let y = 4;\nfor (let x = y = 1; x < 1; x = x + 1) {\n  y;\n}',
  '"enable verbose";\nlet y = 4;\nfor (let x = y = 1; x < 1; x = x + 1) {\n  y;\n}',
  'let x = 3, y = 5;\nx;',
  '"enable verbose";\nlet x = 3, y = 5;\nx;',
  'let x = [1, 2];\nlet [a, b] = x;\na;',
  '"enable verbose";\nlet x = [1, 2];\nlet [a, b] = x;\na;',
  'let x;',
  '"enable verbose";\n let x;',
  'var x = 1;',
  '"enable verbose";\n var x = 1;',
  'let x = 3;\nx += 5;\nx;',
  '"enable verbose";\n let x = 3;\n x += 5;\n x;',
  'let x = 3;\nx <<= 5;\nx;',
  '"enable verbose";\nlet x = 3;\nx <<= 5;\nx;',
  '(function fib(x) { return x <= 1 ? x : fib(x-1) + fib(x-2); })(4);',
  '"enable verbose";\n(function fib(x) { return x <= 1 ? x : fib(x-1) + fib(x-2); })(4);',
  '(function(x) { return x + 1; })(4);',
  '"enable verbose";\n(function(x) { return x + 1; })(4);',
  'if (true)\n  true;\nelse\n  false;',
  '"enable verbose";\n if (true)\ntrue;\n else\nfalse;',
  'for (let i = 0; i < 1; i = i + 1)\n  i;',
  '"enable verbose";\n for (let i = 0; i < 1; i = i + 1)\ni;',
  'let i = 0;\nwhile (i < 1)\n  i = i + 1;',
  '"enable verbose";\n let i = 0;\n while (i < 1)\ni = i + 1;',
  ';',
  '"enable verbose";\n  ;',
  '[];',
  '"enable verbose";\n[];',
  '[1,];',
  '"enable verbose";\n[1,];',
  '({\n  a: 1,\n  b: 2,\n});',
  'function f(...rest) {\n  return rest;\n}\nf(1, 2);',
  '"enable verbose";\n function f(...rest) {\nreturn rest;\n }\n f(1, 2);',
  'function f(x, y) {\n  return x + y;\n}\nf(...[1, 2]);',
  '"enable verbose";\n function f(x, y) {\nreturn x + y;\n }\n f(...[1, 2]);',
  'function f(x, y) {\n  return x + y;\n}\ntry {\n  f(...[1, 2]);\n} catch (e) {\n  display(e);\n}',
  '"enable verbose";\n function f(x, y) {\nreturn x + y;\n }\n try {\nf(...[1, 2]);\n } catch (e) {\ndisplay(e);\n }',
  'for (let i of list()) {\n}',
  '"enable verbose";\n   for (let i of list()) {\n   }',
  'for (let i in { a: 1, b: 2 }) {\n}',
  '"enable verbose";\nfor (let i in { a: 1, b: 2 }) {\n}',
  'function* gen() {\n  yield 2;\n  return 1;\n}',
  '"enable verbose";\n function* gen() {\nyield 2;\nreturn 1;\n }',
  'class Box {\n}',
  '"enable verbose";\nclass Box {\n}',
  'class BoxError extends Error {\n  constructor() {\n    super(1);\n  }\n}',
  '"enable verbose";\n class BoxError extends Error {\nconstructor() {\n  super(1);\n}\n }',
  'export function f(x) {\n  return x;\n}',
  '"enable verbose";\n export function f(x) {\nreturn x;\n }',
  'export const x = 1;',
  '"enable verbose";\nexport const x = 1;',
  'const x = 1;\nexport default x;',
  '"enable verbose";\nconst x = 1;\nexport default x;',
  "import { stripIndent } from './utils/testing';",
  '"enable verbose";\nimport { stripIndent } from \'./utils/testing\';',
  '(1, 2);',
  '"enable verbose";\n(1, 2);',
  'interface Box {\n}',
  '"enable verbose";\ninterface Box {\n}',
  '`hi`',
  '\n\t"enable verbose";\n\t\'hi\'',
  '/pattern/',
  '\n\t"enable verbose";\n\t/pattern/',
  'function Box() {\n  this[0] = 5;\n}\nconst box = new Box();',
  '"enable verbose";\n function Box() {\nthis[0] = 5;\n }\n const box = new Box();',
  '1 << 10;',
  '"enable verbose";\n1 << 10;',
  'let x = 5;\ntypeof x;',
  '"enable verbose";\nlet x = 5;\ntypeof x;',
  'function f() {\n  return;\n}',
  '"enable verbose";\n   function f() {\n     return;\n   }',
  'function f(x, x) {\n  return x;\n}',
  '"enable verbose";\n function f(x, x) {\nreturn x;\n }',
  'let yield = 5;',
  '"enable verbose";\nlet yield = 5;',
  'package = 5;',
  '"enable verbose";\n   package = 5;',
  "const s = stream(true, false, undefined, 1, x=>x, null, -123, head);\nconst result = [];\nstream_for_each(item => {result[array_length(result)] = item;}, s);\nstream_ref(s,4)(22) === 22 && stream_ref(s,7)(pair('', '1')) === '1' && result;",
  'display(0);',
  'display(1e38); display(NaN); display(Infinity);',
  'stream_to_list(null);',
  'raw_display("Tom\'s assisstant said: \\"tuna.\\"");',
  'display("Tom\'s assisstant said: \\"tuna.\\"");',
  'display(x => x); display((x, y) => x + y);',
  'display(list(1, 2));',
  'function test(){\n  const x = true;\n  {\n      const x = false;\n  }\n  return x;\n}\ntest();',
  'function test(){\n  const x = true;\n  if(true) {\n      const x = false;\n  } else {\n      const x = false;\n  }\n  return x;\n}\ntest();',
  'function test(){\n  let x = true;\n  if(true) {\n      let x = false;\n  } else {\n      let x = false;\n  }\n  return x;\n}\ntest();',
  'display([1, 2, [4, 5]]);',
  'stream_to_list(stream(1, true, 3, 4.4, [1, 2]));',
  'function test(){\n  let x = true;\n  for (let x = 1; x > 0; x = x - 1) {\n  }\n  return x;\n}\ntest();',
  'display({a: 1, b: 2, c: {d: 3}});',
  'function f(x, y) {\n  return x <= 0 ? y : f(x-1, y+1);\n}\nf(5000, 5000);',
  'let sum = 0;\nstream_for_each(x => {\n  sum = sum + x;\n}, stream(1, 2, 3));\nsum;',
  'function test(){\n  let x = true;\n  while (true) {\n    let x = false;\n    break;\n  }\n  return x;\n}\ntest();',
  'equal(stream_to_list(stream_map(x => 2 * x, stream(12, 11, 3))), list(24, 22, 6));',
  'function test(){\n  let z = [];\n  for (let x = 0; x < 10; x = x + 1) {\n    z[x] = () => x;\n  }\n  return z[1]();\n}\ntest();',
  'equal(\n  stream_to_list(\n    stream_filter(x => x <= 4, stream(2, 10, 1000, 1, 3, 100, 4, 5, 2, 1000))\n  )\n, list(2, 1, 3, 4, 2));',
  'function test(){\n    let z = [];\n    for (let x = 0; x < 2; x = x + 1) {\n      x = 1;\n    }\n    return false;\n}\ntest();',
  'const v = f();\nfunction f() {\n  return 1;\n}\nv;',
  'const a = 1;\nfunction f() {\n  display(a);\n  const a = 5;\n}\nf();',
  'equal(stream_to_list(build_stream(5, x => x * x)), list(0, 1, 4, 9, 16));',
  'const a = 1;\n{\n  a + a;\n  const a = 10;\n}',
  'let variable = 1;\nfunction test(){\n  variable = 100;\n  let variable = true;\n  return variable;\n}\ntest();',
  'stringify(parse("\'"), undefined, 2);',
  'equal(stream_to_list(\n  stream_reverse(\n    stream("string", null, undefined, null, 123))),\nlist(123, null, undefined, null, "string"));',
  'stringify(parse("function* f() { yield 1; } f();"), undefined, 2);',
  'function test(){\n  const constant = 3;\n  constant = 4;\n  return constant;\n}\ntest();',
  'stringify(parse("x = y = x;"), undefined, 2);',
  'equal(stream_to_list(stream_append(stream("string", 123), stream(456, null, undefined)))\n  , list("string", 123, 456, null, undefined));',
  'equal(\n  stream_to_list(stream_member("string", stream(1, 2, 3, "string", 123, 456, null, undefined))),\n  list("string", 123, 456, null, undefined));',
  "parse_int('1100101010101', 2);",
  "parse_int('uu1', 36);",
  "parse_int('uu1', 2);",
  'parse_int(42, 2);',
  'parse_int(42, 2.1);',
  "parse_int('10', 1);",
  "parse_int('10', 37);",
  "parse_int(42, '2');",
  'stream_remove(1, stream(1));',
  'function test() {\n  let variable = false;\n  variable = true;\n  return variable;\n}\ntest();',
  'const f = xs => append(f(xs), list());\nf(list(1, 2));',
  'stream_to_list(stream_remove(2, stream(1)));',
  'equal(stream_to_list(stream_remove_all(1, stream(1, 2, 3, 4, 1, 1, "1", 5, 1, 1, 6))),\n  list(2, 3, 4, "1", 5, 6));',
  'equal(stream_to_list(stream_remove_all(1, stream(2, 3, "1"))), list(2, 3, "1"));',
  'equal(stream_to_list(enum_stream(1, 5)), list(1, 2, 3, 4, 5));',
  'equal(stream_to_list(enum_stream(1.5, 5)), list(1.5, 2.5, 3.5, 4.5));',
  'stream_ref(stream(1, 2, 3, "4", 4), 4);',
  'function f(x, y) {\n  if (x <= 0) {\n    return y;\n  } else {\n    return false || f(x-1, y+1);\n  }\n}\nf(5000, 5000);',
  'function i(n, redundant) {\n  return n === 0 ? 0 : 1 + i(n-1, r());\n}\nfunction r() {\n  return 1;\n}\ni(1000, 1);',
  "function f(x, y) {\n  return x <= 0 ? y : false || x > 0 ? f(x-1, y+1) : 'unreachable';\n}\nf(5000, 5000);",
  'const f = (x, y) => x <= 0 ? y : f(x-1, y+1);\nf(5000, 5000);',
  'function f(xs) { return append(f(xs), list()); }\nf(list(1, 2));',
  'const f = (x, y) => {\n  if (x <= 0) {\n    return y;\n  } else {\n    return f(x-1, y+1);\n  }\n};\nf(5000, 5000);',
  'function f(x, y) {\n  if (x <= 0) {\n    return y;\n  } else {\n    return g(x-1, y+1);\n  }\n}\nfunction g(x, y) {\n  if (x <= 0) {\n    return y;\n  } else {\n    return f(x-1, y+1);\n  }\n}\nf(5000, 5000);',
  'const f = (x, y) => x <= 0 ? y : g(x-1, y+1);\nconst g = (x, y) => x <= 0 ? y : f(x-1, y+1);\nf(5000, 5000);',
  'function f(x, y, z) {\n  if (x <= 0) {\n    return y;\n  } else {\n    return f(x-1, y+f(0, z, 0), z);\n  }\n}\nf(5000, 5000, 2);',
  'const f = i => f(i+1) - 1;\nf(0);',
  'function f(n) {\n  return n === 0 ? 0 : 1 + g(n - 1);\n}\nfunction g(n) {\n  return 1 + f(n);\n}\nf(1000);',
  'function f(i) { return f(i+1) - 1; }\nf(0);',
  'function t(x, y, z) {\n  return x + y + z;\n}\nidentity(t) === t && t(1, 2, 3) === 6;',
  'undefined();',
  '"enable verbose";\n  undefined();',
  'const a = [];\na[1];',
  'undefined();',
  '"enable verbose";\n  undefined();',
  'undefined(1, true);',
  '"enable verbose";\n  undefined(1, true);',
  'undefined(1, true);',
  'const o = {};\no.nonexistent;',
  '"enable verbose";\n  undefined(1, true);',
  'null();',
  '"enable verbose";\n  null();',
  'null();',
  '"enable verbose";\n  null();',
  'true();',
  '"enable verbose";\n  true();',
  'true();',
  '"enable verbose";\n  true();',
  '0();',
  'const o = {};\no.a = 1;\no.a;',
  '"enable verbose";\n  0();',
  '0();',
  '"enable verbose";\n  0();',
  "'string'();",
  '"enable verbose";\n  \'string\'();',
  "'string'();",
  'const o = {};\no.a = {};\no.a.b = {};\no.a.b.c = "string";\no.a.b.c;',
  '"enable verbose";\n  \'string\'();',
  '[1]();',
  'apply_in_underlying_javascript((a, b, c) => a * b * c, list(2, 5, 6));',
  '"enable verbose";\n[1]();',
  '"enable verbose";\n[1]();',
  '({a: 1})();',
  '[1]();',
  'equal(1, 1) && equal("str", "str") && equal(null, null) && !equal(1, 2) && !equal("str", "");',
  '"enable verbose";\n({a: 1})();',
  '({a: 1})();',
  '"enable verbose";\n({a: 1})();',
  '"enable verbose";\n({a: 1})();',
  'equal(list(1, 2), pair(1, pair(2, null))) && equal(list(1, 2, 3, 4), list(1, 2, 3, 4));',
  'function f(x) {\n  return x;\n}\nf();',
  '"enable verbose";\n  function f(x) {\n    return x;\n  }\n  f();',
  'function f(x) {\n  return x;\n}\nf(1, 2);',
  '!equal(list(1, 2), pair(1, 2)) && !equal(list(1, 2, 3), list(1, list(2, 3)));',
  '"enable verbose";\n  function f(x) {\n    return x;\n  }\n  f(1, 2);',
  'const f = x => x;\nf();',
  '"enable verbose";\n  const f = x => x;\n  f();',
  'if (true) {\n} else {\n}',
  'if (true) {\n  1;\n} else {\n}',
  'const f = x => x;\nf(1, 2);',
  '"enable verbose";\n  const f = x => x;\n  f(1, 2);',
  'const f = [x => x];\nf[0](1, 2);',
  'if (false) {\n} else {\n}',
  'if (false) {\n} else {\n  2;\n}',
  'true ? true : false;',
  'false ? true : false;',
  'false && true;',
  'false && false;',
  'true && false;',
  '"enable verbose";\n  const f = [x => x];\n  f[0](1, 2);',
  '"enable verbose";\nconst g = () => 1;\nconst f = x => g(x);\nf(1);',
  'true && true;',
  'const g = () => 1;\nconst f = x => g(x);\nf(1);',
  'false && 1();',
  'false || true;',
  'false || false;',
  'true || false;',
  'true || true;',
  'let f = x => x;\nconst f = x => x;',
  'const f = x => x;\nconst f = x => x;',
  'let f = x => x;\nfunction f() {}',
  'const f = x => x;\nlet f = x => x;',
  'function f() {}\nfunction f() {}',
  '"enable verbose";\nlet f = x => x;\nfunction f() {}',
  '"enable verbose";\nfunction f() {}\nfunction f() {}',
  'let f = x => x;\nlet f = x => x;',
  '"enable verbose";\nconst f = x => x;\nfunction f() {}',
  'const f = x => x;\nfunction f() {}',
  'function f() {}\nconst f = x => x;',
  '"enable verbose";\nfunction f() {}\nconst f = x => x;',
  'function f() {}\nlet f = x => x;',
  '"enable verbose";\nfunction f() {}\nlet f = x => x;',
  '({}).valueOf;',
  'true || 1();',
  'let i = 0;\nfunction f() {\n  i = i + 1;\n  return i;\n}\ni;',
  'i = 100; f();',
  'f(); i;',
  'i;',
  '({a: 0})["a"];',
  'null.prop;',
  "'hi'.length;",
  'function f() {\n  return 1;\n}\nf.prototype;',
  "'hi'.prop = 5;",
  'function f() {\n  return 1;\n}\nf.prop = 5;',
  'if (\n1\n) {\n  2;\n} else {}',
  "12\n*\n'string';"
]